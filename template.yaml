# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  read-app-sam

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: get-all-items.js
  getAllOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-all-orders.handler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128 # MB
      Timeout: 29
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the OrdersTable
        - DynamoDBReadPolicy:
            TableName: !Ref OrdersTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          ORDERS_TABLE: !Ref OrdersTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /orders/all
            Method: GET
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  OrdersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String

  LambdaFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${getAllOrdersFunction}"
      RetentionInDays: 14
